#!/usr/bin/env python3

import os
import time
import requests
import picamera
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

# Google Photos API scopes
SCOPES = [
    'https://www.googleapis.com/auth/photoslibrary',
    'https://www.googleapis.com/auth/photoslibrary.sharing',
    'https://www.googleapis.com/auth/photos.upload'
]

def authenticate():
    creds = None
    if os.path.exists('/home/picuteness/Bookshelf/pls/token.json'):
        try:
            creds = Credentials.from_authorized_user_file('/home/picuteness/Bookshelf/pls/token.json', SCOPES)
        except Exception as e:
            print(f"Failed to load credentials from token.json: {e}")

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
                print("Token refreshed successfully.")
            except Exception as e:
                print(f"Failed to refresh token: {e}")
                creds = None
        else:
            if not os.path.exists('/home/picuteness/Bookshelf/pls/credentials.json'):
                raise FileNotFoundError("The credentials.json file is missing. Please download it from Google Cloud Console.")
            try:
                flow = InstalledAppFlow.from_client_secrets_file('/home/picuteness/Bookshelf/pls/credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
                print("User authenticated successfully.")
            except Exception as e:
                print(f"Failed to authenticate user: {e}")
                return None

        if creds:
            with open('/home/picuteness/Bookshelf/pls/token.json', 'w') as token:
                token.write(creds.to_json())
            print("Credentials saved to token.json.")

    if creds is None:
        raise ValueError("Credentials are not initialized. Please check the authentication process.")

    return creds


def upload_photo(creds, photo_path, album_id):
    url = 'https://photoslibrary.googleapis.com/v1/uploads'
    
    headers = {
        'Authorization': f'Bearer {creds.token}',
        'Content-Type': 'application/octet-stream',
        'X-Goog-Upload-File-Name': os.path.basename(photo_path),
        'X-Goog-Upload-Protocol': 'raw'
    }

    with open(photo_path, 'rb') as photo_file:
        response = requests.post(url, headers=headers, data=photo_file)

    if response.status_code == 200:
        upload_token = response.text
        print('Upload successful! Upload token:', upload_token)

        create_body = {
            "newMediaItems": [
                {
                    "description": "Uploaded via API",
                    "simpleMediaItem": {
                        "uploadToken": upload_token
                    }
                }
            ],
            "albumId": album_id  # Using the provided album ID
        }

        create_url = 'https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate'
        create_response = requests.post(create_url, headers={'Authorization': f'Bearer {creds.token}'}, json=create_body)

        if create_response.status_code == 200:
            print('Media item created successfully:', create_response.json())
        else:
            print('Failed to create media item:', create_response.json())
    else:
        print('Upload failed:', response.content)

def take_photo():
    with picamera.PiCamera() as camera:
        time.sleep(2)  # Allow camera to warm up
        timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
        folder_path = "/home/picuteness/Pictures"
        os.makedirs(folder_path, exist_ok=True)  # Create folder if it doesn't exist
        filename = os.path.join(folder_path, f"photo_{timestamp}.jpg")
        camera.capture(filename)
        print(f"Photo saved as {filename}")
        return filename  # Return the filename for uploading

def main():
    creds = authenticate()
    album_id = "AEgp6Z-Yybv2X-Z9qG1JdmiCYQo39PMHyu0sJ6Nj6WhwS0AIltQw8Oy0B6l2Fu2gClh3VY3QZ80R"  # Fixed album ID
    photo_path = take_photo()  # Take a photo and get the path
    upload_photo(creds, photo_path, album_id)  # Upload the photo to the specified album

if __name__ == '__main__':
    main()

